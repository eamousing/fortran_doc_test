var tipuesearch = {"pages":[{"title":" fortran_doc_test ","text":"fortran_doc_test Developer Info Erik A. Mousing","tags":"home","loc":"index.html"},{"title":"add_two – fortran_doc_test","text":"public  function add_two(a) result(b) An important function that adds 2.0 to any real. Arguments Type Intent Optional Attributes Name real, intent(in) :: a A real number Return Value real A real number that is 2 bigger Called by proc~~add_two~~CalledByGraph proc~add_two add_two program~main main program~main->proc~add_two Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code function add_two ( a ) result ( b ) !! An important function that adds 2.0 to any real. real , intent ( in ) :: a !! A real number real :: b !! A real number that is 2 bigger b = a + 2.0 end function add_two","tags":"","loc":"proc/add_two.html"},{"title":"mul_two – fortran_doc_test","text":"public  function mul_two(a) result(b) Another important function that multiplies any real by 2. Arguments Type Intent Optional Attributes Name real, intent(in) :: a Return Value real Called by proc~~mul_two~~CalledByGraph proc~mul_two mul_two program~main main program~main->proc~mul_two Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code function mul_two ( a ) result ( b ) !! Another important function that multiplies any real by 2. real , intent ( in ) :: a real :: b b = 2 * a end function mul_two","tags":"","loc":"proc/mul_two.html"},{"title":"math – fortran_doc_test","text":"Used by module~~math~~UsedByGraph module~math math program~main main program~main->module~math Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Functions public  function add_two (a) result(b) An important function that adds 2.0 to any real. Arguments Type Intent Optional Attributes Name real, intent(in) :: a A real number Return Value real A real number that is 2 bigger public  function mul_two (a) result(b) Another important function that multiplies any real by 2. Arguments Type Intent Optional Attributes Name real, intent(in) :: a Return Value real","tags":"","loc":"module/math.html"},{"title":"main – fortran_doc_test","text":"Uses math program~~main~~UsesGraph program~main main module~math math program~main->module~math Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calls program~~main~~CallsGraph program~main main proc~add_two add_two program~main->proc~add_two proc~mul_two mul_two program~main->proc~mul_two Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Attributes Name Initial real :: x real :: y Source Code program main use math implicit none real :: x , y x = 2.0 y = add_two ( x ) print * , \"Your new number is: \" , y y = mul_two ( 4.0 ) print * , \"Your even never numebr is: \" , y end program main","tags":"","loc":"program/main.html"},{"title":"main.f90 – fortran_doc_test","text":"This file depends on sourcefile~~main.f90~~EfferentGraph sourcefile~main.f90 main.f90 sourcefile~math.f90 math.f90 sourcefile~main.f90->sourcefile~math.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code program main use math implicit none real :: x , y x = 2.0 y = add_two ( x ) print * , \"Your new number is: \" , y y = mul_two ( 4.0 ) print * , \"Your even never numebr is: \" , y end program main","tags":"","loc":"sourcefile/main.f90.html"},{"title":"math.f90 – fortran_doc_test","text":"Files dependent on this one sourcefile~~math.f90~~AfferentGraph sourcefile~math.f90 math.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~math.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module math implicit none contains function add_two ( a ) result ( b ) !! An important function that adds 2.0 to any real. real , intent ( in ) :: a !! A real number real :: b !! A real number that is 2 bigger b = a + 2.0 end function add_two function mul_two ( a ) result ( b ) !! Another important function that multiplies any real by 2. real , intent ( in ) :: a real :: b b = 2 * a end function mul_two end module math","tags":"","loc":"sourcefile/math.f90.html"}]}